;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name untangled.client.mutations, :imports nil, :requires {om om.next, om.next om.next}, :uses nil, :defs {mutate {:name untangled.client.mutations/mutate, :file "resources/public/js/compiled/dev/untangled/client/mutations.cljs", :line 5, :column 1, :end-line 5, :end-column 17, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/mutations.cljs", :line 5, :column 11, :end-line 5, :end-column 17}}, post-mutate {:name untangled.client.mutations/post-mutate, :file "resources/public/js/compiled/dev/untangled/client/mutations.cljs", :line 8, :column 1, :end-line 8, :end-column 22, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/mutations.cljs", :line 8, :column 11, :end-line 8, :end-column 22}}, toggle! {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/mutations.cljs", :line 14, :column 7, :end-line 14, :end-column 14, :arglists (quote ([comp field])), :doc "Toggle the given boolean `field` on the specified component."}, :name untangled.client.mutations/toggle!, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/mutations.cljs", :end-column 14, :method-params ([comp field]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([comp field])), :doc "Toggle the given boolean `field` on the specified component."}, set-value! {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/mutations.cljs", :line 19, :column 7, :end-line 19, :end-column 17, :arglists (quote ([component field value])), :doc "Set a raw value on the given `field` of a `component`."}, :name untangled.client.mutations/set-value!, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/mutations.cljs", :end-column 17, :method-params ([component field value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 3, :fn-var true, :arglists (quote ([component field value])), :doc "Set a raw value on the given `field` of a `component`."}, ensure-integer {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/mutations.cljs", :line 24, :column 8, :end-line 24, :end-column 22, :private true, :arglists (quote ([v])), :doc "Helper for set-integer!, use that instead."}, :private true, :name untangled.client.mutations/ensure-integer, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/mutations.cljs", :end-column 22, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Helper for set-integer!, use that instead."}, set-integer! {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/mutations.cljs", :line 30, :column 7, :end-line 30, :end-column 19, :arglists (quote ([component field & {:keys [event value]}])), :doc "Set the given integer on the given `field` of a `component`. Allows same parameters as `set-string!`", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(component field {:keys [event value]})], :arglists ([component field & {:keys [event value]}]), :arglists-meta (nil)}}, :name untangled.client.mutations/set-integer!, :variadic true, :file "resources/public/js/compiled/dev/untangled/client/mutations.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(component field {:keys [event value]})], :arglists ([component field & {:keys [event value]}]), :arglists-meta (nil)}, :method-params [(component field {:keys [event value]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists ([component field & {:keys [event value]}]), :doc "Set the given integer on the given `field` of a `component`. Allows same parameters as `set-string!`"}, set-string! {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/mutations.cljs", :line 37, :column 7, :end-line 37, :end-column 18, :arglists (quote ([component field & {:keys [event value]}])), :doc "Set a string on the given `field` of a `component`. The string can be literal via named parameter `:value` or\n  can be auto-extracted from a UI event using the named parameter `:event`\n\n  Examples\n\n  ```\n  (set-string! this :ui/name :value \"Hello\") ; set from literal (or var)\n  (set-string! this :ui/name :event evt) ; extract from UI event target value\n  ```\n  ", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(component field {:keys [event value]})], :arglists ([component field & {:keys [event value]}]), :arglists-meta (nil)}}, :name untangled.client.mutations/set-string!, :variadic true, :file "resources/public/js/compiled/dev/untangled/client/mutations.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(component field {:keys [event value]})], :arglists ([component field & {:keys [event value]}]), :arglists-meta (nil)}, :method-params [(component field {:keys [event value]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists ([component field & {:keys [event value]}]), :doc "Set a string on the given `field` of a `component`. The string can be literal via named parameter `:value` or\n  can be auto-extracted from a UI event using the named parameter `:event`\n\n  Examples\n\n  ```\n  (set-string! this :ui/name :value \"Hello\") ; set from literal (or var)\n  (set-string! this :ui/name :event evt) ; extract from UI event target value\n  ```\n  "}}, :require-macros {om om.next, om.next om.next}, :cljs.analyzer/constants {:seen #{:default ui/toggle :value :field :event :hierarchy ui/set-props}, :order [:hierarchy :default ui/toggle :field ui/set-props :event :value]}, :doc nil}