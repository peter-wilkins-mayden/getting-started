;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name untangled.client.core, :imports {Uri goog.Uri}, :requires {set clojure.set, Uri goog.Uri, log untangled.client.logging, untangled.client.impl.network untangled.client.impl.network, plumbing untangled.client.impl.om-plumbing, untangled.client.impl.util untangled.client.impl.util, omp om.next.protocols, untangled.client.impl.application untangled.client.impl.application, udom untangled.dom, clojure.set clojure.set, util untangled.client.impl.util, om.next.protocols om.next.protocols, net untangled.client.impl.network, untangled.client.logging untangled.client.logging, om om.next, untangled.client.impl.built-in-mutations untangled.client.impl.built-in-mutations, untangled.client.impl.om-plumbing untangled.client.impl.om-plumbing, om.next om.next, untangled.dom untangled.dom, app untangled.client.impl.application}, :uses nil, :defs {uri-params {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 123, :column 7, :end-line 123, :end-column 17, :arglists (quote ([] [url])), :doc "Get the current URI parameters from the browser url or one you supply", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [url]), :arglists ([] [url]), :arglists-meta (nil nil)}}, :name untangled.client.core/uri-params, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [url]), :arglists ([] [url]), :arglists-meta (nil nil)}, :method-params ([] [url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists ([] [url]), :doc "Get the current URI parameters from the browser url or one you supply"}, merge-alternate-union-elements! {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 240, :column 8, :end-line 240, :end-column 39, :private true, :arglists (quote ([app root-component]))}, :private true, :name untangled.client.core/merge-alternate-union-elements!, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 39, :method-params ([app root-component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app root-component]))}, mount {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 79, :column 4, :end-line 79, :end-column 9, :protocol untangled.client.core/UntangledApplication, :doc "Start/replace the webapp on the given DOM ID or DOM Node.", :arglists (quote ([this root-component target-dom-id]))}, :protocol untangled.client.core/UntangledApplication, :name untangled.client.core/mount, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 9, :method-params ([this root-component target-dom-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 79, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this root-component target-dom-id])), :doc "Start/replace the webapp on the given DOM ID or DOM Node."}, initial-state {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 59, :column 4, :end-line 59, :end-column 17, :protocol untangled.client.core/InitialAppState, :doc "Get the initial state to be used for this component in app state. You are responsible for composing these together.", :arglists (quote ([clz params]))}, :protocol untangled.client.core/InitialAppState, :name untangled.client.core/initial-state, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 17, :method-params ([clz params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([clz params])), :doc "Get the initial state to be used for this component in app state. You are responsible for composing these together."}, merge-state! {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 199, :column 7, :end-line 199, :end-column 19, :arglists (quote ([app-or-reconciler component object-data & named-parameters])), :doc "Normalize and merge a (sub)tree of application state into the application using a known UI component's query and ident.\n\n  This utility function obtains the ident of the incoming object-data using the UI component's ident function. Once obtained,\n  it uses the component's query and ident to normalize the data and place the resulting objects in the correct tables.\n  It is also quite common to want those new objects to be linked into lists in other spot in app state, so this function\n  supports optional named parameters for doing this. These named parameters can be repeated as many times as you like in order\n  to place the ident of the new object into other data structures of app state.\n\n  This function honors the data merge story for Untangled: attributes that are queried for but do not appear in the\n  data will be removed from the application. This function also uses the initial state for the component as a base\n  for merge if there was no state for the object already in the database.\n\n  This function will also trigger re-renders of components that directly render object merged, as well as any components\n  into which you integrate that data via the named-parameters.\n\n  This function is primarily meant to be used from things like server push and setTimeout/setInterval, where you're outside\n  of the normal mutation story. Do not use this function within abstract mutations.\n\n  - app-or-reconciler: The Untangled application or Om reconciler\n  - component: The class of the component that corresponsds to the data. Must have an ident.\n  - object-data: A map (tree) of data to merge. Will be normalized for you.\n  - named-parameter: Post-processing ident integration steps. see integrate-ident!\n\n  Any keywords that appear in ident integration steps will be added to the re-render queue.\n  ", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(app-or-reconciler component object-data named-parameters)], :arglists ([app-or-reconciler component object-data & named-parameters]), :arglists-meta (nil)}}, :name untangled.client.core/merge-state!, :variadic true, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(app-or-reconciler component object-data named-parameters)], :arglists ([app-or-reconciler component object-data & named-parameters]), :arglists-meta (nil)}, :method-params [(app-or-reconciler component object-data named-parameters)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 3, :fn-var true, :arglists ([app-or-reconciler component object-data & named-parameters]), :doc "Normalize and merge a (sub)tree of application state into the application using a known UI component's query and ident.\n\n  This utility function obtains the ident of the incoming object-data using the UI component's ident function. Once obtained,\n  it uses the component's query and ident to normalize the data and place the resulting objects in the correct tables.\n  It is also quite common to want those new objects to be linked into lists in other spot in app state, so this function\n  supports optional named parameters for doing this. These named parameters can be repeated as many times as you like in order\n  to place the ident of the new object into other data structures of app state.\n\n  This function honors the data merge story for Untangled: attributes that are queried for but do not appear in the\n  data will be removed from the application. This function also uses the initial state for the component as a base\n  for merge if there was no state for the object already in the database.\n\n  This function will also trigger re-renders of components that directly render object merged, as well as any components\n  into which you integrate that data via the named-parameters.\n\n  This function is primarily meant to be used from things like server push and setTimeout/setInterval, where you're outside\n  of the normal mutation story. Do not use this function within abstract mutations.\n\n  - app-or-reconciler: The Untangled application or Om reconciler\n  - component: The class of the component that corresponsds to the data. Must have an ident.\n  - object-data: A map (tree) of data to merge. Will be normalized for you.\n  - named-parameter: Post-processing ident integration steps. see integrate-ident!\n\n  Any keywords that appear in ident integration steps will be added to the re-render queue.\n  "}, get-url-param {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 132, :column 7, :end-line 132, :end-column 20, :arglists (quote ([param-name] [url param-name])), :doc "Get the value of the named parameter from the browser URL (or an explicit one)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([param-name] [url param-name]), :arglists ([param-name] [url param-name]), :arglists-meta (nil nil)}}, :name untangled.client.core/get-url-param, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([param-name] [url param-name]), :arglists ([param-name] [url param-name]), :arglists-meta (nil nil)}, :method-params ([param-name] [url param-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 2, :fn-var true, :arglists ([param-name] [url param-name]), :doc "Get the value of the named parameter from the browser URL (or an explicit one)"}, reset-state! {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 80, :column 4, :end-line 80, :end-column 16, :protocol untangled.client.core/UntangledApplication, :doc "Replace the entire app state with the given (pre-normalized) state.", :arglists (quote ([this new-state]))}, :protocol untangled.client.core/UntangledApplication, :name untangled.client.core/reset-state!, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 16, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state])), :doc "Replace the entire app state with the given (pre-normalized) state."}, get-url {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 119, :column 7, :end-line 119, :end-column 14, :arglists (quote ([])), :doc "Get the current window location from the browser"}, :name untangled.client.core/get-url, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Get the current window location from the browser"}, refresh {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 81, :column 4, :end-line 81, :end-column 11, :protocol untangled.client.core/UntangledApplication, :doc "Refresh the UI (force re-render). NOTE: You MUST support :key on your root DOM element with the :ui/react-key value from app state for this to work.", :arglists (quote ([this]))}, :protocol untangled.client.core/UntangledApplication, :name untangled.client.core/refresh, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Refresh the UI (force re-render). NOTE: You MUST support :key on your root DOM element with the :ui/react-key value from app state for this to work."}, integrate-ident! {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 162, :column 7, :end-line 162, :end-column 23, :arglists (quote ([state ident & named-parameters])), :doc "Integrate an ident into any number of places in the app state. This function is safe to use within mutation\n  implementations as a general helper function.\n\n  The named parameters can be specified any number of times. They are:\n\n  - append:  A vector (path) to a list in your app state where this new object's ident should be appended. Will not append\n  the ident if that ident is already in the list.\n  - prepend: A vector (path) to a list in your app state where this new object's ident should be prepended. Will not append\n  the ident if that ident is already in the list.\n  - replace: A vector (path) to a specific locaation in app-state where this object's ident should be placed. Can target a to-one or to-many.\n   If the target is a vector element then that element must already exist in the vector.\n  ", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(state ident named-parameters)], :arglists ([state ident & named-parameters]), :arglists-meta (nil)}}, :name untangled.client.core/integrate-ident!, :variadic true, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(state ident named-parameters)], :arglists ([state ident & named-parameters]), :arglists-meta (nil)}, :method-params [(state ident named-parameters)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 2, :fn-var true, :arglists ([state ident & named-parameters]), :doc "Integrate an ident into any number of places in the app state. This function is safe to use within mutation\n  implementations as a general helper function.\n\n  The named parameters can be specified any number of times. They are:\n\n  - append:  A vector (path) to a list in your app state where this new object's ident should be appended. Will not append\n  the ident if that ident is already in the list.\n  - prepend: A vector (path) to a list in your app state where this new object's ident should be prepended. Will not append\n  the ident if that ident is already in the list.\n  - replace: A vector (path) to a specific locaation in app-state where this object's ident should be placed. Can target a to-one or to-many.\n   If the target is a vector element then that element must already exist in the vector.\n  "}, component-merge-query {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 138, :column 8, :end-line 138, :end-column 29, :private true, :arglists (quote ([component object-data])), :doc "Calculates the query that can be used to pull (or merge) a component with an ident\n  to/from a normalized app database. Requires a tree of data that represents the instance of\n  the component in question (e.g. ident will work on it)"}, :private true, :name untangled.client.core/component-merge-query, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 29, :method-params ([component object-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component object-data])), :doc "Calculates the query that can be used to pull (or merge) a component with an ident\n  to/from a normalized app database. Requires a tree of data that represents the instance of\n  the component in question (e.g. ident will work on it)"}, get-initial-state {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 61, :column 7, :end-line 61, :end-column 24, :arglists (quote ([clz params]))}, :name untangled.client.core/get-initial-state, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 24, :method-params ([clz params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 2, :fn-var true, :arglists (quote ([clz params]))}, history {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 82, :column 4, :end-line 82, :end-column 11, :protocol untangled.client.core/UntangledApplication, :doc "Return a serialized version of the current history of the application, suitable for network transfer", :arglists (quote ([this]))}, :protocol untangled.client.core/UntangledApplication, :name untangled.client.core/history, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return a serialized version of the current history of the application, suitable for network transfer"}, ->Application {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 84, :column 12, :end-line 84, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([initial-state started-callback networking queue response-channel reconciler parser mounted? reconciler-options]))}, :name untangled.client.core/->Application, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 23, :method-params ([initial-state started-callback networking queue response-channel reconciler parser mounted? reconciler-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 84, :end-line 84, :max-fixed-arity 9, :fn-var true, :arglists (quote ([initial-state started-callback networking queue response-channel reconciler parser mounted? reconciler-options]))}, map->Application {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 84, :column 12, :end-line 84, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__40173]))}, :name untangled.client.core/map->Application, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 23, :method-params ([G__40173]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__40173]))}, UntangledApplication {:meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 78, :column 14, :end-line 78, :end-column 34, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {mount [[this root-component target-dom-id]], reset-state! [[this new-state]], refresh [[this]], history [[this]]}}}, :protocol-symbol true, :name untangled.client.core/UntangledApplication, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 34, :column 1, :line 78, :protocol-info {:methods {mount [[this root-component target-dom-id]], reset-state! [[this new-state]], refresh [[this]], history [[this]]}}, :info nil, :end-line 78, :impls #{untangled.client.core/Application}, :doc nil, :jsdoc ("@interface")}, new-untangled-test-client {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 111, :column 7, :end-line 111, :end-column 32, :arglists (quote ([& {:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}}])), :doc "A test client that has no networking. Useful for UI testing with a real Untangled app container.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}})], :arglists ([& {:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}}]), :arglists-meta (nil)}}, :name untangled.client.core/new-untangled-test-client, :variadic true, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}})], :arglists ([& {:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}}]), :arglists-meta (nil)}, :method-params [({:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}}]), :doc "A test client that has no networking. Useful for UI testing with a real Untangled app container."}, InitialAppState {:meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 58, :column 14, :end-line 58, :end-column 29, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {initial-state [[clz params]]}}}, :protocol-symbol true, :name untangled.client.core/InitialAppState, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 29, :column 1, :line 58, :protocol-info {:methods {initial-state [[clz params]]}}, :info nil, :end-line 58, :impls #{}, :doc nil, :jsdoc ("@interface")}, preprocess-merge {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 147, :column 8, :end-line 147, :end-column 24, :private true, :arglists (quote ([state-atom component object-data])), :doc "Does the steps necessary to honor the data merge technique defined by Untangled with respect\n  to data overwrites in the app database."}, :private true, :name untangled.client.core/preprocess-merge, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 24, :method-params ([state-atom component object-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 3, :fn-var true, :arglists (quote ([state-atom component object-data])), :doc "Does the steps necessary to honor the data merge technique defined by Untangled with respect\n  to data overwrites in the app database."}, Application {:num-fields 9, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable untangled.client.core/UntangledApplication cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name untangled.client.core/Application, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 23, :type true, :column 12, :internal-ctor true, :line 84, :record true, :end-line 84, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, new-untangled-client {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 17, :column 7, :end-line 17, :end-column 27, :arglists (quote ([& {:keys [initial-state started-callback networking request-transform network-error-callback migrate], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil}}])), :doc "Entrypoint for creating a new untangled client. Instantiates an Application with default values, unless\n  overridden by the parameters. If you do not supply a networking object, one will be provided that connects to the\n  same server the application was served from, at `/api`.\n\n  If you supply a `:request-transform` it must be a function:\n\n  ```\n (fn [edn headers] [edn' headers'])\n  ```\n\n  it can replace the outgoing EDN or headers (returning both as a vector). NOTE: Both of these are clojurescript types.\n  The edn will be encoded with transit, and the headers will be converted to a js map.\n\n  `:initial-state` is your applications initial state. If it is an atom, it *must* be normalized. Untangled databases\n  always have normalization turned on (for server data merging). If it is not an atom, it will be auto-normalized.\n\n  `:started-callback` is an optional function that will receive the intiailized untangled application after it is\n  mounted in the DOM, and is useful for triggering initial loads, routing mutations, etc. The Om reconciler is available\n  under the `:reconciler` key (and you can access the app state, root node, etc from there.)\n\n  `:network-error-callback` is a function of two arguments, the app state atom and the error, which will be invoked for\n  every network error (status code >= 400, or no network found), should you choose to use the built-in networking record.\n\n  `:migrate` is optional. It is a (fn [state tid->rid] ... state') that should return a new state where all tempids\n  (the keys of `tid->rid`) are rewritten to real ids (the values of tid->rid). This defaults to a full recursive\n  algorithm against all data in the app-state, which is correct but possibly slow).  Note that tempids will have an Om tempid data type.\n  See Om reconciler documentation for further information.\n\n  There is currently no way to circumvent the encoding of the body into transit. If you want to talk to other endpoints\n  via alternate protocols you must currently implement that outside of the framework (e.g. global functions/state).\n  ", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [initial-state started-callback networking request-transform network-error-callback migrate], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil}})], :arglists ([& {:keys [initial-state started-callback networking request-transform network-error-callback migrate], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil}}]), :arglists-meta (nil)}}, :name untangled.client.core/new-untangled-client, :variadic true, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [initial-state started-callback networking request-transform network-error-callback migrate], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil}})], :arglists ([& {:keys [initial-state started-callback networking request-transform network-error-callback migrate], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil}}]), :arglists-meta (nil)}, :method-params [({:keys [initial-state started-callback networking request-transform network-error-callback migrate], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [initial-state started-callback networking request-transform network-error-callback migrate], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil}}]), :doc "Entrypoint for creating a new untangled client. Instantiates an Application with default values, unless\n  overridden by the parameters. If you do not supply a networking object, one will be provided that connects to the\n  same server the application was served from, at `/api`.\n\n  If you supply a `:request-transform` it must be a function:\n\n  ```\n (fn [edn headers] [edn' headers'])\n  ```\n\n  it can replace the outgoing EDN or headers (returning both as a vector). NOTE: Both of these are clojurescript types.\n  The edn will be encoded with transit, and the headers will be converted to a js map.\n\n  `:initial-state` is your applications initial state. If it is an atom, it *must* be normalized. Untangled databases\n  always have normalization turned on (for server data merging). If it is not an atom, it will be auto-normalized.\n\n  `:started-callback` is an optional function that will receive the intiailized untangled application after it is\n  mounted in the DOM, and is useful for triggering initial loads, routing mutations, etc. The Om reconciler is available\n  under the `:reconciler` key (and you can access the app state, root node, etc from there.)\n\n  `:network-error-callback` is a function of two arguments, the app state atom and the error, which will be invoked for\n  every network error (status code >= 400, or no network found), should you choose to use the built-in networking record.\n\n  `:migrate` is optional. It is a (fn [state tid->rid] ... state') that should return a new state where all tempids\n  (the keys of `tid->rid`) are rewritten to real ids (the values of tid->rid). This defaults to a full recursive\n  algorithm against all data in the app-state, which is correct but possibly slow).  Note that tempids will have an Om tempid data type.\n  See Om reconciler documentation for further information.\n\n  There is currently no way to circumvent the encoding of the body into transit. If you want to talk to other endpoints\n  via alternate protocols you must currently implement that outside of the framework (e.g. global functions/state).\n  "}}, :require-macros {om om.next, om.next om.next}, :cljs.analyzer/constants {:seen #{started-callback :untangled/meta initial-state :children reconciler-options :network-error-callback :untangled/merge :networking :response-channel :else :config :queue :mounted? :migrate :steps :reconciler networking :command :history response-channel :type queue :component mounted? :global-error-callback :merge-query :request-transform reconciler :parser :arg :merge-data :union/default :started-callback parser :initial-state :query :union :reconciler-options :join}, :order [:initial-state :started-callback :networking :request-transform :network-error-callback :migrate :reconciler-options :global-error-callback :union/default :else :queue :response-channel :reconciler :parser :mounted? :history :config :steps :untangled/meta initial-state started-callback networking queue response-channel reconciler parser mounted? reconciler-options :untangled/merge :merge-query :merge-data :command :arg :children :join :type :component :query :union]}, :doc nil}