;; Analyzed by ClojureScript 1.8.51
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name untangled.client.impl.data-fetch, :imports nil, :requires {uuid cljs-uuid-utils.core, set clojure.set, log untangled.client.logging, cljs-uuid-utils.core cljs-uuid-utils.core, plumbing untangled.client.impl.om-plumbing, om.next.impl.parser om.next.impl.parser, omp om.next.protocols, udom untangled.dom, clojure.set clojure.set, m untangled.client.mutations, util om.util, om.next.protocols om.next.protocols, untangled.client.mutations untangled.client.mutations, op om.next.impl.parser, untangled.client.logging untangled.client.logging, om om.next, untangled.client.impl.om-plumbing untangled.client.impl.om-plumbing, om.next om.next, untangled.dom untangled.dom, clojure.walk clojure.walk, om.util om.util}, :uses {prewalk clojure.walk}, :defs {set-failed! {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 230, :column 9, :end-line 230, :end-column 20, :arglists (quote ([state] [state params])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([state] [state params]), :arglists ([state] [state params]), :arglists-meta (nil nil)}}, :name untangled.client.impl.data-fetch/set-failed!, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([state] [state params]), :arglists ([state] [state params]), :arglists-meta (nil nil)}, :method-params ([state] [state params]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 230, :end-line 230, :max-fixed-arity 2, :fn-var true, :arglists ([state] [state params])}, mark-parallel-loading {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 40, :column 7, :end-line 40, :end-column 28, :arglists (quote ([reconciler])), :doc "Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and return maps with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `callback-args` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."}, :name untangled.client.impl.data-fetch/mark-parallel-loading, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 28, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler])), :doc "Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and return maps with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `callback-args` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."}, failed? {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 29, :column 9, :end-line 29, :end-column 16, :arglists (quote ([state]))}, :name untangled.client.impl.data-fetch/failed?, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 16, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, data-state? {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 21, :column 7, :end-line 21, :end-column 18, :arglists (quote ([state]))}, :name untangled.client.impl.data-fetch/data-state?, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 18, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, ready? {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 27, :column 9, :end-line 27, :end-column 15, :arglists (quote ([state]))}, :name untangled.client.impl.data-fetch/ready?, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 15, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, ready-state {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 153, :column 7, :end-line 153, :end-column 18, :arglists (quote ([& {:keys [ident field params without query post-mutation fallback parallel refresh], :or {without #{}, refresh []}}])), :doc "Generate a ready-to-load state with all of the necessary details to do\n  remoting and merging.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [ident field params without query post-mutation fallback parallel refresh], :or {without #{}, refresh []}})], :arglists ([& {:keys [ident field params without query post-mutation fallback parallel refresh], :or {without #{}, refresh []}}]), :arglists-meta (nil)}}, :name untangled.client.impl.data-fetch/ready-state, :variadic true, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [ident field params without query post-mutation fallback parallel refresh], :or {without #{}, refresh []}})], :arglists ([& {:keys [ident field params without query post-mutation fallback parallel refresh], :or {without #{}, refresh []}}]), :arglists-meta (nil)}, :method-params [({:keys [ident field params without query post-mutation fallback parallel refresh], :or {without #{}, refresh []}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [ident field params without query post-mutation fallback parallel refresh], :or {without #{}, refresh []}}]), :doc "Generate a ready-to-load state with all of the necessary details to do\n  remoting and merging."}, set-loading! {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 225, :column 9, :end-line 225, :end-column 21, :arglists (quote ([state] [state params])), :doc "Sets a marker to loading, ensuring that it has a UUID", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([state] [state params]), :arglists ([state] [state params]), :arglists-meta (nil nil)}}, :name untangled.client.impl.data-fetch/set-loading!, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([state] [state params]), :arglists ([state] [state params]), :arglists-meta (nil nil)}, :method-params ([state] [state params]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 225, :end-line 225, :max-fixed-arity 2, :fn-var true, :arglists ([state] [state params]), :doc "Sets a marker to loading, ensuring that it has a UUID"}, elide-ast-nodes {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 121, :column 7, :end-line 121, :end-column 22, :arglists (quote ([{:keys [key], :as ast} elision-set])), :doc "Remove items from a query (AST) that have a key listed in the elision-set"}, :name untangled.client.impl.data-fetch/elide-ast-nodes, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 22, :method-params ([p__39606 elision-set]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [key], :as ast} elision-set])), :doc "Remove items from a query (AST) that have a key listed in the elision-set"}, data-path {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 211, :column 7, :end-line 211, :end-column 16, :arglists (quote ([state]))}, :name untangled.client.impl.data-fetch/data-path, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 16, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 211, :end-line 211, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, inject-query-params {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 127, :column 7, :end-line 127, :end-column 26, :arglists (quote ([ast params])), :doc "Inject parameters into elements of the top-level query.\n\n  `params` is a map from keyword (on the query in the AST) to parameter maps. So, given the AST for this query:\n\n  ```\n  [:a :b :c]\n  ```\n\n  and a `params` of `{:a {:x 1} :c {:y 2}}` you'll get an AST representing:\n\n  ```\n  [(:a {:x 1}) :b (:c {:y 2})]\n  ```\n  "}, :name untangled.client.impl.data-fetch/inject-query-params, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 26, :method-params ([ast params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ast params])), :doc "Inject parameters into elements of the top-level query.\n\n  `params` is a map from keyword (on the query in the AST) to parameter maps. So, given the AST for this query:\n\n  ```\n  [:a :b :c]\n  ```\n\n  and a `params` of `{:a {:x 1} :c {:y 2}}` you'll get an AST representing:\n\n  ```\n  [(:a {:x 1}) :b (:c {:y 2})]\n  ```\n  "}, mark-loading {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 66, :column 7, :end-line 66, :end-column 19, :arglists (quote ([reconciler])), :doc "Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and returns a map with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `callback-args` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."}, :name untangled.client.impl.data-fetch/mark-loading, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 19, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler])), :doc "Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and returns a map with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `callback-args` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."}, error-callback {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 273, :column 8, :end-line 273, :end-column 22, :private true, :arglists (quote ([reconciler]))}, :private true, :name untangled.client.impl.data-fetch/error-callback, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 22, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 273, :end-line 273, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler]))}, loading? {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 28, :column 9, :end-line 28, :end-column 17, :arglists (quote ([state]))}, :name untangled.client.impl.data-fetch/loading?, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, data-field {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 201, :column 7, :end-line 201, :end-column 17, :arglists (quote ([state]))}, :name untangled.client.impl.data-fetch/data-field, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 201, :end-line 201, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, data-exclusions {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 216, :column 7, :end-line 216, :end-column 22, :arglists (quote ([state]))}, :name untangled.client.impl.data-fetch/data-exclusions, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 22, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, data-refresh {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 203, :column 7, :end-line 203, :end-column 19, :arglists (quote ([state]))}, :name untangled.client.impl.data-fetch/data-refresh, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 203, :end-line 203, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, mark-ready {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 177, :column 7, :end-line 177, :end-column 17, :arglists (quote ([& {:keys [state query ident field without params post-mutation fallback parallel refresh], :or {refresh [], without #{}}}])), :doc "Place a ready-to-load marker into the application state. This should be done from\n  a mutate function that is abstractly loading something. This is intended for internal use.\n\n  See `load-field` for public API.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [state query ident field without params post-mutation fallback parallel refresh], :or {refresh [], without #{}}})], :arglists ([& {:keys [state query ident field without params post-mutation fallback parallel refresh], :or {refresh [], without #{}}}]), :arglists-meta (nil)}}, :name untangled.client.impl.data-fetch/mark-ready, :variadic true, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [state query ident field without params post-mutation fallback parallel refresh], :or {refresh [], without #{}}})], :arglists ([& {:keys [state query ident field without params post-mutation fallback parallel refresh], :or {refresh [], without #{}}}]), :arglists-meta (nil)}, :method-params [({:keys [state query ident field without params post-mutation fallback parallel refresh], :or {refresh [], without #{}}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [state query ident field without params post-mutation fallback parallel refresh], :or {refresh [], without #{}}}]), :doc "Place a ready-to-load marker into the application state. This should be done from\n  a mutate function that is abstractly loading something. This is intended for internal use.\n\n  See `load-field` for public API."}, data-query-key {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 204, :column 7, :end-line 204, :end-column 21, :arglists (quote ([state]))}, :name untangled.client.impl.data-fetch/data-query-key, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 21, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 204, :end-line 204, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, make-data-state {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 98, :column 7, :end-line 98, :end-column 22, :arglists (quote ([type] [type params])), :doc "This is just a testing function -- using ready-state as public interface and call the\n  `set-{type}!` functions to change it as needed.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([type] [type params]), :arglists ([type] [type params]), :arglists-meta (nil nil)}}, :name untangled.client.impl.data-fetch/make-data-state, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([type] [type params]), :arglists ([type] [type params]), :arglists-meta (nil nil)}, :method-params ([type] [type params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists ([type] [type params]), :doc "This is just a testing function -- using ready-state as public interface and call the\n  `set-{type}!` functions to change it as needed."}, get-ready-query {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 109, :column 7, :end-line 109, :end-column 22, :arglists (quote ([state])), :doc "Get the query for items that are ready to load into the given app state. Can be called any number of times\n  (side effect free)."}, :name untangled.client.impl.data-fetch/get-ready-query, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 22, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Get the query for items that are ready to load into the given app state. Can be called any number of times\n  (side effect free)."}, data-uuid {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 202, :column 7, :end-line 202, :end-column 16, :arglists (quote ([state]))}, :name untangled.client.impl.data-fetch/data-uuid, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 16, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, set-ready! {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 222, :column 9, :end-line 222, :end-column 19, :arglists (quote ([state] [state params])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([state] [state params]), :arglists ([state] [state params]), :arglists-meta (nil nil)}}, :name untangled.client.impl.data-fetch/set-ready!, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([state] [state params]), :arglists ([state] [state params]), :arglists-meta (nil nil)}, :method-params ([state] [state params]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 222, :end-line 222, :max-fixed-arity 2, :fn-var true, :arglists ([state] [state params])}, place-load-markers {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 31, :column 8, :end-line 31, :end-column 26, :private true, :arglists (quote ([state-atom items-to-load])), :doc "Place load markers in the app state at their data paths so that UI rendering can see them."}, :private true, :name untangled.client.impl.data-fetch/place-load-markers, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 26, :method-params ([state-atom items-to-load]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state-atom items-to-load])), :doc "Place load markers in the app state at their data paths so that UI rendering can see them."}, set-global-loading {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 238, :column 8, :end-line 238, :end-column 26, :private true, :arglists (quote ([reconciler]))}, :private true, :name untangled.client.impl.data-fetch/set-global-loading, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 26, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler]))}, loaded-callback {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 244, :column 8, :end-line 244, :end-column 23, :private true, :arglists (quote ([reconciler]))}, :private true, :name untangled.client.impl.data-fetch/loaded-callback, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 23, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler]))}, data-ident {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 196, :column 7, :end-line 196, :end-column 17, :arglists (quote ([state]))}, :name untangled.client.impl.data-fetch/data-ident, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, data-query {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 197, :column 7, :end-line 197, :end-column 17, :arglists (quote ([state]))}, :name untangled.client.impl.data-fetch/data-query, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 197, :end-line 197, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, data-params {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 214, :column 7, :end-line 214, :end-column 18, :arglists (quote ([state]))}, :name untangled.client.impl.data-fetch/data-params, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 18, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, valid-types {:name untangled.client.impl.data-fetch/valid-types, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 96, :column 1, :end-line 96, :end-column 17, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 96, :column 6, :end-line 96, :end-column 17}}, full-query {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 234, :column 7, :end-line 234, :end-column 17, :arglists (quote ([items])), :doc "Compose together a sequence of states into a single query."}, :name untangled.client.impl.data-fetch/full-query, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 17, :method-params ([items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items])), :doc "Compose together a sequence of states into a single query."}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, om om.next, om.next om.next}, :cljs.analyzer/constants {:seen #{:ui/react-key :children :untangled.client.impl.data-fetch/post-mutation :ready :untangled.client.impl.data-fetch/parallel :key :refresh :callback-args :ui/fetch-state :parallel :fallback :on-load :params :field :untangled.client.impl.data-fetch/without :state :post-mutation :untangled.client.impl.data-fetch/params :without :untangled.client.impl.data-fetch/type :untangled.client.impl.data-fetch/ident :untangled/server-error :loading :untangled.client.impl.data-fetch/fallback :ident :dispatch-key :untangled.client.impl.data-fetch/query :untangled/force-root :untangled/loads-in-progress :om.next/ready-to-load :action :untangled.client.impl.data-fetch/field :error :ui/loading-data :untangled.client.impl.data-fetch/refresh :on-error :query :items-to-load :untangled.client.impl.data-fetch/uuid :failed}, :order [:untangled.client.impl.data-fetch/type :ready :loading :failed :ui/fetch-state :untangled/loads-in-progress :om.next/ready-to-load :untangled.client.impl.data-fetch/parallel :ui/loading-data :query :on-load :on-error :callback-args :untangled.client.impl.data-fetch/params :items-to-load :key :children :dispatch-key :params :ident :field :without :post-mutation :fallback :parallel :refresh :untangled.client.impl.data-fetch/post-mutation :untangled.client.impl.data-fetch/ident :untangled.client.impl.data-fetch/fallback :untangled.client.impl.data-fetch/query :untangled.client.impl.data-fetch/field :untangled.client.impl.data-fetch/refresh :untangled.client.impl.data-fetch/uuid :state :untangled.client.impl.data-fetch/without :action :untangled/force-root :untangled/server-error :error :ui/react-key]}, :doc nil}