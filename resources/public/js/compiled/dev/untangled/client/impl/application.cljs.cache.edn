;; Analyzed by ClojureScript 1.8.51
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name untangled.client.impl.application, :imports nil, :requires {goog.dom goog.dom, log untangled.client.logging, i18n untangled.i18n.core, untangled.client.impl.network untangled.client.impl.network, plumbing untangled.client.impl.om-plumbing, async cljs.core.async, untangled.client.impl.data-fetch untangled.client.impl.data-fetch, cljs.core.async cljs.core.async, untangled.i18n.core untangled.i18n.core, gdom goog.dom, net untangled.client.impl.network, untangled.client.logging untangled.client.logging, om om.next, untangled.client.impl.om-plumbing untangled.client.impl.om-plumbing, om.next om.next, f untangled.client.impl.data-fetch}, :uses nil, :defs {enqueue-mutations {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 29, :column 7, :end-line 29, :end-column 24, :arglists (quote ([{:keys [queue], :as app} remote-tx-map cb]))}, :name untangled.client.impl.application/enqueue-mutations, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 24, :method-params ([p__39786 remote-tx-map cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [queue], :as app} remote-tx-map cb]))}, sweep-merge {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 97, :column 7, :end-line 97, :end-column 18, :arglists (quote ([target source]))}, :name untangled.client.impl.application/sweep-merge, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 18, :method-params ([target source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 2, :fn-var true, :arglists (quote ([target source]))}, start-network-sequential-processing {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 57, :column 7, :end-line 57, :end-column 42, :arglists (quote ([{:keys [networking queue response-channel]}])), :doc "Starts a communicating sequential process that sends network requests from the request queue."}, :name untangled.client.impl.application/start-network-sequential-processing, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 42, :method-params ([p__39849]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [networking queue response-channel]}])), :doc "Starts a communicating sequential process that sends network requests from the request queue."}, initialize-internationalization {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 73, :column 7, :end-line 73, :end-column 38, :arglists (quote ([reconciler])), :doc "Configured Om to re-render when locale changes."}, :name untangled.client.impl.application/initialize-internationalization, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 38, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler])), :doc "Configured Om to re-render when locale changes."}, fallback-handler {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 13, :column 7, :end-line 13, :end-column 23, :arglists (quote ([{:keys [reconciler]} query]))}, :name untangled.client.impl.application/fallback-handler, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 23, :method-params ([p__39754 query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [reconciler]} query]))}, initialize-global-error-callback {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 139, :column 7, :end-line 139, :end-column 39, :arglists (quote ([app]))}, :name untangled.client.impl.application/initialize-global-error-callback, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 39, :method-params ([app]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([app]))}, enqueue {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 22, :column 8, :end-line 22, :end-column 15, :private true, :arglists (quote ([q v]))}, :private true, :name untangled.client.impl.application/enqueue, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 15, :method-params ([q v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([q v]))}, sweep-one {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 81, :column 7, :end-line 81, :end-column 16, :arglists (quote ([m])), :doc "Remove not-found keys from m (non-recursive)"}, :name untangled.client.impl.application/sweep-one, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Remove not-found keys from m (non-recursive)"}, initialize {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 146, :column 7, :end-line 146, :end-column 17, :arglists (quote ([{:keys [networking started-callback], :as app} initial-state root-component dom-id-or-node reconciler-options])), :doc "Initialize the untangled Application. Creates network queue, sets up i18n, creates reconciler, mounts it, and returns\n  the initialized app"}, :name untangled.client.impl.application/initialize, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 17, :method-params ([p__40126 initial-state root-component dom-id-or-node reconciler-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 5, :fn-var true, :arglists (quote ([{:keys [networking started-callback], :as app} initial-state root-component dom-id-or-node reconciler-options])), :doc "Initialize the untangled Application. Creates network queue, sets up i18n, creates reconciler, mounts it, and returns\n  the initialized app"}, server-send {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 50, :column 7, :end-line 50, :end-column 18, :arglists (quote ([app remote-tx-map cb])), :doc "Puts queries/mutations (and their corresponding callbacks) onto the send queue. The networking CSP will pull these\n  off one at a time and send them through the real networking layer. Reads are guaranteed to *follow* writes."}, :name untangled.client.impl.application/server-send, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 18, :method-params ([app remote-tx-map cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 3, :fn-var true, :arglists (quote ([app remote-tx-map cb])), :doc "Puts queries/mutations (and their corresponding callbacks) onto the send queue. The networking CSP will pull these\n  off one at a time and send them through the real networking layer. Reads are guaranteed to *follow* writes."}, sweep {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 88, :column 7, :end-line 88, :end-column 12, :arglists (quote ([m])), :doc "Remove all of the not-found keys (recursively) from v, stopping at marked leaves (if present)"}, :name untangled.client.impl.application/sweep, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 12, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Remove all of the not-found keys (recursively) from v, stopping at marked leaves (if present)"}, real-send {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 24, :column 7, :end-line 24, :end-column 16, :arglists (quote ([net tx on-load on-error])), :doc "Do a properly-plumbed network send that strips ui attributes from the tx"}, :name untangled.client.impl.application/real-send, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 16, :method-params ([net tx on-load on-error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 4, :fn-var true, :arglists (quote ([net tx on-load on-error])), :doc "Do a properly-plumbed network send that strips ui attributes from the tx"}, enqueue-reads {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 40, :column 7, :end-line 40, :end-column 20, :arglists (quote ([{:keys [queue reconciler networking]}]))}, :name untangled.client.impl.application/enqueue-reads, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 20, :method-params ([p__39793]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [queue reconciler networking]}]))}, generate-reconciler {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 107, :column 7, :end-line 107, :end-column 26, :arglists (quote ([{:keys [queue], :as app} initial-state parser {:keys [migrate], :or {migrate nil}}])), :doc "The reconciler's send method calls UntangledApplication/server-send, which itself requires a reconciler with a\n  send method already defined. This creates a catch-22 / circular dependency on the reconciler and :send field within\n  the reconciler.\n\n  To resolve the issue, we def an atom pointing to the reconciler that the send method will deref each time it is\n  called. This allows us to define the reconciler with a send method that, at the time of initialization, has an app\n  that points to a nil reconciler. By the end of this function, the app's reconciler reference has been properly set."}, :name untangled.client.impl.application/generate-reconciler, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 26, :method-params ([p__40115 initial-state parser p__40116]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 4, :fn-var true, :arglists (quote ([{:keys [queue], :as app} initial-state parser {:keys [migrate], :or {migrate nil}}])), :doc "The reconciler's send method calls UntangledApplication/server-send, which itself requires a reconciler with a\n  send method already defined. This creates a catch-22 / circular dependency on the reconciler and :send field within\n  the reconciler.\n\n  To resolve the issue, we def an atom pointing to the reconciler that the send method will deref each time it is\n  called. This allows us to define the reconciler with a send method that, at the time of initialization, has an app\n  that points to a nil reconciler. By the end of this function, the app's reconciler reference has been properly set."}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, om om.next, om.next om.next}, :cljs.analyzer/constants {:seen #{:remote :pathopt :networking :read :response-channel :else :locale :callback-args :queue :mounted? :migrate :reconciler :on-load :ui/locale :recur :state :global-error-callback :parser :untangled/server-error :send :merge-tree :complete :started-callback :on-error :untangled.client.impl.om-plumbing/not-found :query :normalize :mutate}, :order [:reconciler :untangled/server-error :recur :else :queue :remote :query :on-load :on-error :networking :callback-args :response-channel :complete :locale :untangled.client.impl.om-plumbing/not-found :migrate :ui/locale :state :send :normalize :pathopt :merge-tree :parser :global-error-callback :started-callback :read :mutate :mounted?]}, :doc nil}