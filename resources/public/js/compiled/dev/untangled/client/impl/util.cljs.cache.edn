;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name untangled.client.impl.util, :imports nil, :requires {cljs.pprint cljs.pprint, om om.next, om.next om.next}, :uses nil, :defs {deep-merge {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/util.cljs", :line 6, :column 7, :end-line 6, :end-column 17, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :name untangled.client.impl.util/deep-merge, :variadic true, :file "resources/public/js/compiled/dev/untangled/client/impl/util.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 0, :fn-var true, :arglists ([& xs])}, log-app-state {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/client/impl/util.cljs", :line 12, :column 7, :end-line 12, :end-column 20, :arglists (quote ([app-atom & keys-and-paths])), :doc "Helper for logging the app-state. Pass in an untangled application atom and either top-level keys, data-paths\n  (like get-in), or both.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(app-atom keys-and-paths)], :arglists ([app-atom & keys-and-paths]), :arglists-meta (nil)}}, :name untangled.client.impl.util/log-app-state, :variadic true, :file "resources/public/js/compiled/dev/untangled/client/impl/util.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(app-atom keys-and-paths)], :arglists ([app-atom & keys-and-paths]), :arglists-meta (nil)}, :method-params [(app-atom keys-and-paths)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists ([app-atom & keys-and-paths]), :doc "Helper for logging the app-state. Pass in an untangled application atom and either top-level keys, data-paths\n  (like get-in), or both."}}, :require-macros {cljs.pprint cljs.pprint, om om.next, om.next om.next}, :cljs.analyzer/constants {:seen #{:else :reconciler}, :order [:else :reconciler]}, :doc nil}