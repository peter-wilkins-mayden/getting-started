;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name untangled.dom, :imports nil, :requires {uuid cljs-uuid-utils.core, log untangled.client.logging, cljs-uuid-utils.core cljs-uuid-utils.core, omp om.next.protocols, om.next.protocols om.next.protocols, untangled.client.logging untangled.client.logging, om om.next, om.next om.next, str clojure.string, clojure.string clojure.string}, :uses nil, :defs {unique-key {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/dom.cljs", :line 8, :column 7, :end-line 8, :end-column 17, :arglists (quote ([])), :doc "Get a unique string-based key. Never returns the same value."}, :name untangled.dom/unique-key, :variadic false, :file "resources/public/js/compiled/dev/untangled/dom.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Get a unique string-based key. Never returns the same value."}, force-render {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/dom.cljs", :line 12, :column 7, :end-line 12, :end-column 19, :arglists (quote ([reconciler keywords] [reconciler])), :doc "Re-render components. If only a reconciler is supplied then it forces a full DOM re-render by updating the :ui/react-key\n  in app state and forcing Om to re-render the entire DOM, which only works properly if you query\n  for :ui/react-key in your Root render component and add that as the react :key to your top-level element.\n\n  If you supply an additional vector of keywords and idents then it will ask Om to rerender only those components that mention\n  those things in their queries.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([reconciler keywords] [reconciler]), :arglists ([reconciler keywords] [reconciler]), :arglists-meta (nil nil)}}, :name untangled.dom/force-render, :variadic false, :file "resources/public/js/compiled/dev/untangled/dom.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([reconciler keywords] [reconciler]), :arglists ([reconciler keywords] [reconciler]), :arglists-meta (nil nil)}, :method-params ([reconciler keywords] [reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists ([reconciler keywords] [reconciler]), :doc "Re-render components. If only a reconciler is supplied then it forces a full DOM re-render by updating the :ui/react-key\n  in app state and forcing Om to re-render the entire DOM, which only works properly if you query\n  for :ui/react-key in your Root render component and add that as the react :key to your top-level element.\n\n  If you supply an additional vector of keywords and idents then it will ask Om to rerender only those components that mention\n  those things in their queries."}, append-class {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/dom.cljs", :line 28, :column 7, :end-line 28, :end-column 19, :arglists (quote ([component local-state-key])), :doc "Given a component and a local state key or keys, to be passed to `om/get-state`,\n  returns a function that takes the `state-value` to test, a `default-class-string`,\n  and optionaol `:when-true` and `:when-false`. The values `:when-false` and `when-true`\n  are appended to `default-class-string` after the test against `state-value`.\n\n  Parameters:\n  `component`: The component to pass to `om/get-state`.\n  `local-state-key`: The key or keys to pass to `om/get-state`."}, :name untangled.dom/append-class, :variadic false, :file "resources/public/js/compiled/dev/untangled/dom.cljs", :end-column 19, :method-params ([component local-state-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component local-state-key])), :doc "Given a component and a local state key or keys, to be passed to `om/get-state`,\n  returns a function that takes the `state-value` to test, a `default-class-string`,\n  and optionaol `:when-true` and `:when-false`. The values `:when-false` and `when-true`\n  are appended to `default-class-string` after the test against `state-value`.\n\n  Parameters:\n  `component`: The component to pass to `om/get-state`.\n  `local-state-key`: The key or keys to pass to `om/get-state`."}, toggle-class {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/dom.cljs", :line 45, :column 7, :end-line 45, :end-column 19, :arglists (quote ([data key always-classes & {:keys [when-true when-false], :or {when-true "active", when-false ""}}])), :doc "Adds the 'visible' class and removes the 'hidden' class to the pre-supplied class string based on the truthiness\n  of the value in data at key.\n\n  Parameters:\n  `data`: A map containing the component's state.\n  `key`: A key within `data`.\n  `always-classes`: A string that has the CSS classes to always return in the returned string.\n\n  Optional named parameters:\n\n  `:when-true v` : This string to add when the key's value is true. Defaults to \"active\".\n  `:when-false v` : The string to add when the key's value is false. Defaults to \"\".\n  ", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(data key always-classes {:keys [when-true when-false], :or {when-true "active", when-false ""}})], :arglists ([data key always-classes & {:keys [when-true when-false], :or {when-true "active", when-false ""}}]), :arglists-meta (nil)}}, :name untangled.dom/toggle-class, :variadic true, :file "resources/public/js/compiled/dev/untangled/dom.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(data key always-classes {:keys [when-true when-false], :or {when-true "active", when-false ""}})], :arglists ([data key always-classes & {:keys [when-true when-false], :or {when-true "active", when-false ""}}]), :arglists-meta (nil)}, :method-params [(data key always-classes {:keys [when-true when-false], :or {when-true "active", when-false ""}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 3, :fn-var true, :arglists ([data key always-classes & {:keys [when-true when-false], :or {when-true "active", when-false ""}}]), :doc "Adds the 'visible' class and removes the 'hidden' class to the pre-supplied class string based on the truthiness\n  of the value in data at key.\n\n  Parameters:\n  `data`: A map containing the component's state.\n  `key`: A key within `data`.\n  `always-classes`: A string that has the CSS classes to always return in the returned string.\n\n  Optional named parameters:\n\n  `:when-true v` : This string to add when the key's value is true. Defaults to \"active\".\n  `:when-false v` : The string to add when the key's value is false. Defaults to \"\".\n  "}, text-value {:protocol-inline nil, :meta {:file "/Users/peterwilkins/getting-started-video/resources/public/js/compiled/dev/untangled/dom.cljs", :line 65, :column 7, :end-line 65, :end-column 17, :arglists (quote ([evt])), :doc "Returns the text value from an input change event."}, :name untangled.dom/text-value, :variadic false, :file "resources/public/js/compiled/dev/untangled/dom.cljs", :end-column 17, :method-params ([evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([evt])), :doc "Returns the text value from an input change event."}}, :require-macros {om om.next, om.next om.next}, :cljs.analyzer/constants {:seen #{:ui/react-key :else :when-false :when-true}, :order [:ui/react-key :when-true :when-false :else]}, :doc nil}